<Activity mc:Ignorable="sap sap2010" x:Class="EvaluateFormula" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sg="clr-namespace:System.Globalization;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Formula" Type="InArgument(x:String)" />
    <x:Property Name="out_Result" Type="OutArgument(x:String)" />
    <x:Property Name="in_dicFactors" Type="InArgument(scg:Dictionary(x:String, x:String))" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1226,2125</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>EvaluateFormula_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Testing.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Globalization</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="WF to determine the type of formula obtained from the configuration table. When a arithmetic statement is found the code is executed.&#xA;&#xA;Note: * It only executes arithmetic operations with two values. And first value is always the same (CalculatedValue)&#xA;          * Logic statement are hard coded. " DisplayName="EvaluateFormula" sap:VirtualizedContainerService.HintSize="1236,2060" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <If Condition="[in_Formula.ToUpper.Contains(&quot;IF&quot;) OR in_Formula.ToUpper.Contains(&quot;REPLACE&quot;)]" sap:VirtualizedContainerService.HintSize="1194,1896" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence DisplayName="Sequence Logic statement" sap:VirtualizedContainerService.HintSize="773,1738" sap2010:WorkflowViewState.IdRef="Sequence_2">
          <Sequence.Variables>
            <Variable x:TypeArguments="s:String[]" Default="[{String.Empty}]" Name="arTransmitDates" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If Condition="[in_Formula.ToUpper.Contains(&quot;IF&quot;)]" sap:VirtualizedContainerService.HintSize="731,443" sap2010:WorkflowViewState.IdRef="If_2">
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="376,256" sap2010:WorkflowViewState.IdRef="Sequence_4">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim result As Boolean&#xD;&#xA;Dim factors As Dictionary(Of String, String) = dicFactors&#xD;&#xA;&#xD;&#xA;Dim conditionStart As Integer = in_formula.IndexOf(&quot;IF&quot;) + 2&#xD;&#xA;Dim conditionEnd As Integer = in_formula.IndexOf(&quot;THEN&quot;)&#xD;&#xA;Dim condition As String = in_formula.Substring(conditionStart, conditionEnd - conditionStart).Trim()&#xD;&#xA;&#xD;&#xA;Dim trueResultStart As Integer = in_formula.IndexOf(&quot;THEN&quot;) + 4&#xD;&#xA;Dim trueResultEnd As Integer = in_formula.IndexOf(&quot;ELSE&quot;)&#xD;&#xA;Dim trueResult As String = in_formula.Substring(trueResultStart, trueResultEnd - trueResultStart).Trim()&#xD;&#xA;&#xD;&#xA;Dim falseResultStart As Integer = in_formula.IndexOf(&quot;ELSE&quot;) + 4&#xD;&#xA;Dim falseResult As String = in_formula.Substring(falseResultStart).Trim()&#xD;&#xA;&#xD;&#xA;For Each factor As KeyValuePair(Of String, String) In factors&#xD;&#xA;&#x9;condition = condition.Replace(factor.Key, factor.Value)&#xD;&#xA;Next&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;Condition |&quot;+condition+&quot;|&quot;)&#xD;&#xA;&#xD;&#xA;Dim parts() As String = condition.Split(&quot;=&quot;c)&#xD;&#xA;If parts.Length = 2 Then&#xD;&#xA;&#x9;result = parts(0).Trim.ToUpper.Equals(parts(1).Trim.ToUpper)&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;If result Then&#xD;&#xA;&#x9;out_result = trueResult&#xD;&#xA;Else&#xD;&#xA;&#x9;out_result = falseResult&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;&#x9;" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_3">
                  <ui:InvokeCode.Arguments>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="dicFactors">[in_dicFactors]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_formula">[in_Formula]</InArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="out_result">[out_Result]</OutArgument>
                  </ui:InvokeCode.Arguments>
                </ui:InvokeCode>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="200,83" sap2010:WorkflowViewState.IdRef="Sequence_5">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </Sequence>
            </If.Else>
          </If>
          <If Condition="[in_Formula.ToUpper.Contains(&quot;REPLACE&quot;)]" sap:VirtualizedContainerService.HintSize="731,1163" sap2010:WorkflowViewState.IdRef="If_3">
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="695,976" sap2010:WorkflowViewState.IdRef="Sequence_6">
                <Sequence.Variables>
                  <Variable x:TypeArguments="x:String" Default="[String.Empty]" Name="newTransmitFormatted" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="653,334" sap2010:WorkflowViewState.IdRef="CommentOut_1">
                  <ui:CommentOut.Body>
                    <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,256" sap2010:WorkflowViewState.IdRef="Sequence_11">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim value As String = dicFactors.Item(&quot;Transit&quot;)&#xA;Dim result As Boolean&#xA;Dim conditionStart As Integer = in_formula.IndexOf(&quot;IF&quot;) + 2&#xA;Dim conditionEnd As Integer = in_formula.IndexOf(&quot;THEN&quot;)&#xA;Dim condition As String = in_formula.Substring(conditionStart, conditionEnd - conditionStart).Trim()&#xA;&#xA;Dim trueResultStart As Integer = in_formula.IndexOf(&quot;THEN&quot;) + 4&#xA;Dim trueResultEnd As Integer = in_formula.IndexOf(&quot;ELSE&quot;)&#xA;Dim trueResult As String = in_formula.Substring(trueResultStart, trueResultEnd - trueResultStart).Trim()&#xA;&#xA;Dim falseResultStart As Integer = in_formula.IndexOf(&quot;ELSE&quot;) + 4&#xA;Dim falseResult As String = in_formula.Substring(falseeResultStart).Trim()&#xA;&#xA;For Each factor As KeyValuePair(Of String, String) In dicFactors&#xA;&#x9;condition.Replace(factor.Key, factor.Value)&#xA;Next&#xA;&#xA;Dim parts() As String = condition.Split(&quot;=&quot;c)&#xA;If parts.Length = 2 Then&#xA;&#x9;result = parts(0).Equals(parts(1))&#xA;End If&#xA;&#xA;If result Then&#xA;&#x9;out_result = trueResult&#xA;Else&#xA;&#x9;out_result = falseResult&#xA;&#xA;&#x9;" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
                        <ui:InvokeCode.Arguments>
                          <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="dicFactors">[in_dicFactors]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="in_formula">[in_Formula]</InArgument>
                          <OutArgument x:TypeArguments="x:String" x:Key="out_result" />
                        </ui:InvokeCode.Arguments>
                      </ui:InvokeCode>
                    </Sequence>
                  </ui:CommentOut.Body>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:CommentOut>
                <Assign sap:VirtualizedContainerService.HintSize="653,60" sap2010:WorkflowViewState.IdRef="Assign_4">
                  <Assign.To>
                    <OutArgument x:TypeArguments="s:String[]">[arTransmitDates]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="s:String[]">[in_dicFactors.Item("Transmit").Split(" to ")]</InArgument>
                  </Assign.Value>
                </Assign>
                <If Condition="[arTransmitDates.Count()&gt;0]" sap:VirtualizedContainerService.HintSize="653,410" sap2010:WorkflowViewState.IdRef="If_4">
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="304,252" sap2010:WorkflowViewState.IdRef="Sequence_9">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="sg:CultureInfo" Default="[New System.Globalization.CultureInfo(&quot;en-US&quot;)]" Name="culture" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_7">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[newTransmitFormatted]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[Convert.ToDateTime(arTransmitDates(0), culture).ToString("dd MMM yyyy") + " through "+Convert.ToDateTime(arTransmitDates(1), culture).ToString("dd MMM yyyy")]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_8">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[out_Result]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[newTransmitFormatted]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence sap:VirtualizedContainerService.HintSize="304,152" sap2010:WorkflowViewState.IdRef="Sequence_10">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_3">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[out_Result]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[in_dicFactors.Item("Transit").Replace("to","through")]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="200,83" sap2010:WorkflowViewState.IdRef="Sequence_7">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Sequence - Arithmetic expression" sap:VirtualizedContainerService.HintSize="376,387" sap2010:WorkflowViewState.IdRef="Sequence_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim formula As String = in_formula&#xD;&#xA;Dim factors As Dictionary(Of String, String) = in_dicFactors&#xD;&#xA;&#xD;&#xA;For Each factor As KeyValuePair(Of String,String) In factors&#xD;&#xA;&#x9;formula = formula.Replace(factor.Key, factor.Value.Replace(&quot;,&quot;,&quot;&quot;))&#xD;&#xA;&#x9;'Console.WriteLine(&quot;Factor: &quot;+factor.Key + &quot; Value: &quot;+factor.Value)&#xD;&#xA;&#x9;'Console.WriteLine(&quot;Factor: &quot;+factor.Key + &quot; Value: &quot;+Convert.ToDecimal(factor.Value).ToString())&#xD;&#xA;Next&#xD;&#xA;&#xD;&#xA;Console.WriteLine(&quot;Formula: |&quot;+formula+&quot;|&quot;)&#xD;&#xA;&#xD;&#xA;Dim result As String = String.Empty&#xD;&#xA;&#xD;&#xA;Dim table As New DataTable()&#xD;&#xA;result = table.Compute(formula, Nothing).ToString&#xD;&#xA;&#xD;&#xA;out_result = Convert.ToDecimal(result).ToString(&quot;n3&quot;)" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_formula">[in_Formula]</InArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="out_result">[out_Result]</OutArgument>
              <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_dicFactors">[in_dicFactors]</InArgument>
            </ui:InvokeCode.Arguments>
          </ui:InvokeCode>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Calculation Result: &quot;+ String.Format(out_Result,&quot;n&quot;)]" />
        </Sequence>
      </If.Else>
    </If>
  </Sequence>
</Activity>